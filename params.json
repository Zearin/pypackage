{"name":"Pypackage","tagline":"Tools to package python from static metadata","body":"Pypackage\r\n=========\r\n\r\n[![Build\r\nStatus](https://travis-ci.org/ccpgames/pypackage.svg?branch=master)](https://travis-ci.org/ccpgames/pypackage)\r\n[![Coverage\r\nStatus](https://coveralls.io/repos/ccpgames/pypackage/badge.svg?branch=master)](https://coveralls.io/r/ccpgames/pypackage?branch=master)\r\n[![Version](https://img.shields.io/pypi/v/pypackage.svg)](https://pypi.python.org/pypi/pypackage/)\r\n[![Download\r\nformat](https://img.shields.io/badge/format-wheel-green.svg?)](https://pypi.python.org/pypi/pypackage/)\r\n[![Downloads this\r\nmonth](https://img.shields.io/pypi/dm/pypackage.svg)](https://pypi.python.org/pypi/pypackage/)\r\n[![Development\r\nStatus](https://img.shields.io/badge/status-beta-orange.svg)](https://pypi.python.org/pypi/pypackage/)\r\n[![License](https://img.shields.io/github/license/ccpgames/pypackage.svg)](https://pypi.python.org/pypi/pypackage/)\r\n\r\nPypackage is a collection of python packaging applications including:\r\n\r\n    py-build\r\n    py-develop\r\n    py-install\r\n    py-setup\r\n    py-test\r\n\r\nThe main goal of Pypackage is to make python packaging easier and\r\nfaster.\r\n\r\nWouldn't it be nice if you could just write some python, run a command,\r\nand have a distributable package? Well now you can!\r\n\r\nFeatures\r\n--------\r\n\r\n-   automatic python modules and packages detection\r\n-   automatic inclusion of non-python package data files, and their\r\n    inclusion in and writing of the MANIFEST.in\r\n-   support for three different testing frameworks (pytest, nose, and\r\n    unittest) for use with `setup.py test`\r\n-   automatic script detection (any executable file in ./bin or\r\n    ./scripts)\r\n-   automatic version, author, maintainer and email(s) detection\r\n    (perfers \\_\\_init\\_\\_.py, \\_\\_version\\_\\_.py)\r\n-   curses front-end to python classifiers selection\r\n\r\nExample, \"Hello World\" application:\r\n-----------------------------------\r\n\r\n``` {.sourceCode .bash}\r\n$ mkdir hello_world\r\n$ cd hello_world\r\n$ vim hello_world.py   # write your python here... :)\r\n$ py-build -is\r\n```\r\n\r\nThe `py-build -is` command will take you through an interactive py-build\r\nsession and save the setup.py to disk after creating it, but will not\r\nrun it.\r\n\r\nYou can also use the `py-setup` command at any time to print what\r\nPypackage would use as a setup.py in the current directory's context.\r\n\r\nMetadata can be mixed in with site-wide defaults from \\$HOME/.pypackage\r\nif you want to fill in some common attributes for all your projects.\r\n\r\nPypackage also provides three different test runners to automatically\r\nfind and run your tests with `python setup.py test`, you can use any of\r\npytest, nose or unittest.\r\n\r\nTo be clear though: pypackage does not intend on replacing setuptools,\r\npip, or really anything at all in the python packaging tool-chain, it\r\nonly attempts to complement those utilities and make getting started\r\nwith python packaging a little easier.\r\n\r\nIn my utopian perfect dream world, I'd see projects not having a\r\nsetup.py under source control, instead only a static metadata file, then\r\nhaving the inverse relationship being true in the distribution version\r\nof the package.\r\n\r\nExample, write Python and send it to PyPI\r\n-----------------------------------------\r\n\r\nFirst, [configure your \\~/.pypirc\r\nfile](https://docs.python.org/2/distutils/packageindex.html#pypirc) with\r\na `[pypi]` section if you haven't already. Now, assuming you lay out\r\nyour project something like:\r\n\r\n    ./your_project\r\n    ./your_project/README.md\r\n    ./your_project/pypackage.meta\r\n    ./your_project/...\r\n    ./your_project/your_project/__init__.py\r\n    ./your_project/your_project/your_code.py\r\n    ./your_project/your_project/...\r\n\r\nWith pypackage installed, from `./your_project` run the following\r\ncommands to send your project to PyPI for the first time:\r\n\r\n``` {.sourceCode .bash}\r\n$ py-build\r\n$ py-build -s\r\n$ python setup.py register\r\n$ twine upload dist/* || pip install twine && twine upload dist/*\r\n```\r\n\r\nEvery time after that, to update your package is a two step process:\r\n\r\n``` {.sourceCode .bash}\r\n$ py-build\r\n$ twine upload dist/*\r\n```\r\n\r\nThis will upload a binary wheel and source distribution to PyPI so you\r\ncan share your work with the world.\r\n\r\nThe source distribution will include a `setup.py` and will not include\r\nthe `pypackage.meta` if you use one. In this way, Pypackage does not\r\ncreate a build dependency on your distribution, but rather only on your\r\nsource, or perhaps more specifically, your build chain and/or\r\ndevelopment environment. Unless you choose to develop off of the\r\ndistributed source version, then carry on doing your thing. Just don't\r\nsubmit any patches to the `setup.py` because it's not a real thing in\r\nthe source. As a project maintainer, you may even consider adding\r\n`setup.py` to the `.gitignore` of your pypackaged projects.\r\n\r\nFurther examples\r\n----------------\r\n\r\nIf your OS can run a bash script, execute `demo.sh` in the top level of\r\nthis repo to create a new pypackage venv and some simple example\r\npackages in an `example` directory. From there feel free to play around\r\nand experiment with pypackage features and applications.\r\n\r\nScreenshots\r\n-----------\r\n\r\nThe following screenshots were all taken with the `detected_pkg`\r\npackage, which is created by the `demo.sh` script described in the\r\nfurther examples section above.\r\n\r\nCurses top level classifiers selection screen:\r\n\r\n![top level classifiers](https://raw.githubusercontent.com/ccpgames/pypackage/gh-pages/images/top_level_post.png)\r\n\r\nCurses development status screen with `Beta` selected:\r\n\r\n![development status classifiers](https://raw.githubusercontent.com/ccpgames/pypackage/gh-pages/images/dev_status_post.png)\r\n\r\nInteractive build process which used the above in it's classifiers\r\nselection:\r\n\r\n![\\`py-build -si\\` interactive build session](https://raw.githubusercontent.com/ccpgames/pypackage/gh-pages/images/interactive_build_post.png)\r\n\r\nCopyright and License\r\n=====================\r\n\r\npypackage was written by Adam Talsma\r\n\r\nCopyright (c) 2015 CCP hf.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a\r\ncopy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}